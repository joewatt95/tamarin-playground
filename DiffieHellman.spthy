theory DiffieHellman
begin

builtins: hashing, asymmetric-encryption, diffie-hellman

// functions: h/1, aenc/2, adec/2, pk/1
// equations:
//   adec(aenc(m, pk(k)), k) = m

// functions: to_pub_key/1, to_sess_key/2
// equations:
//   to_pub_key(priv_key) = g ^ priv_key,
//   to_sess_key(priv_key_A, pub_key_B) = pub_key_B ^ priv_key_A

// macros:
//   to_pub_key(priv_key) = 'g' ^ priv_key,
//   to_sess_key(priv_key_A, pub_key_B) = pub_key_B ^ priv_key_A

// predicates:
//   BackgroundTheory() <=> (
//     (All x y #i. Eq(x, y) @ #i ==> x = y)
//   )

rule Gen_priv_pub_keys :
  [Fr(~priv_key)]
  -->
  [!PrivPubKeys($A, ~priv_key, 'g' ^ ~priv_key)]

rule Send_pub_key :
  [!PrivPubKeys($A, ~priv_key, pub_key)]
  -->
  [Out(pub_key)]

rule Reveal_priv_key :
  [!PrivPubKeys($A, ~priv_key, $pub_key)]
  --[RevealPrivKey($A)]->
  [Out(~priv_key)]

rule Gen_sess_key_init :
  [In(pub_key_A), In(pub_key_B),
    !PrivPubKeys($A, ~priv_key_A, pub_key_A),
    !PrivPubKeys($B, ~priv_key_B, pub_key_B)]
  --[_restrict(not $A = $B), GenSessKeyInit($A, ~priv_key_A, $B, ~priv_key_B)]->
  [GenSessKeyInit($A, ~priv_key_A, $B, ~priv_key_B)]

rule Gen_sess_key_ok :
  [GenSessKeyInit($A, ~priv_key_A, $B, ~priv_key_B),
    !PrivPubKeys($B, ~priv_key_B, pub_key_B)]
  --[_restrict(not $A = $B), GenSessKeyOk($A, ~priv_key_A, $B, ~priv_key_B)]->
  [SessKey($A, ~priv_key_A, $B, ~priv_key_B, pub_key_B ^ ~priv_key_A)]

rule Gen_sess_key_mitm :
  let
    sess_key_AC = pub_key_C ^ ~priv_key_A
    sess_key_BC = pub_key_C ^ ~priv_key_B
  in
  [GenSessKeyInit($A, ~priv_key_A, $B, ~priv_key_B),
    In(pub_key_C), !PrivPubKeys($C, ~priv_key_C, pub_key_C)]
  --[_restrict(not ($A = $B) & not ($B = $C) & not ($A = $C)),
      GenSessKeyMitm($A, ~priv_key_A, $B, ~priv_key_B, $C, ~priv_key_C)]->
  [SessKey($A, ~priv_key_A, $C, ~priv_key_C, sess_key_AC),
    SessKey($B, ~priv_key_B, $C, ~priv_key_C, sess_key_BC)]

rule Reveal_sess_key :
  [SessKey($A, ~priv_key_A, $B, ~priv_key_B, sess_key)]
  --[RevealSessKey($A, $B, sess_key)]->
  [Out(sess_key)]

lemma Client_session_key_honest_setup :
  exists-trace
  "Ex A B priv_key_A priv_key_B #i.
    GenSessKeyOk(A, priv_key_A, B, priv_key_B) @ #i &
    not(Ex P #r. RevealPrivKey(P) @ r)"

lemma Man_in_the_middle :
  exists-trace
  "Ex A B C priv_key_A priv_key_B priv_key_C #i .
    GenSessKeyMitm(A, priv_key_A, B, priv_key_B, C, priv_key_C) @ #i &
    not(Ex P #r. RevealPrivKey(P) @ r)"

// lemma Test :
//   all-traces
//   "All A B. (
//     not A = B &
//     not(Ex #r. RevealPrivKey(A) @ r) &
//     not(Ex #r. RevealPrivKey(B) @ r)
//   ) ==> (
//     Ex sess_key #i. SessKeyCreated(A, B, sess_key) @ #i
//   )"

end